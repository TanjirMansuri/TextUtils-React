{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","rows","onChange","event","target","backgroundColor","newText","showAlert","substr","document","getElementById","select","navigator","clipboard","writeText","split","length","defaultProps","aboutText","App","setmode","setAlert","massage","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e6005896.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert &&<div\r\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n      role=\"alert\"\r\n    >\r\n       <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link> */}\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link> */}\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.aboutText}\r\n                </Link>\r\n              </li> */}\r\n            </ul>\r\n            <div\r\n              className={`form-check form-switch text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n            >\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className=\"form-check-label\"\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Enable Dark Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log('uppercase was clicked: '+ text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(' Converted To UpperCase','success')\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    // console.log('lowercase was clicked: '+ text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(' Converted To LowerCase','success')\r\n  };\r\n\r\n  const handleSenCaseClick = () => {\r\n    // console.log('lowercase was clicked: '+ text);\r\n    let newText = text.charAt(0).toUpperCase() + text.substr(1).toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(' Converted To SentenceCase','success')\r\n  };\r\n  \r\n  const handleCopyTextClick = () => {\r\n    // console.log('handleCopyTextClick was clicked: '+ text);\r\n    let newText = document.getElementById(\"myBox\");\r\n    newText.select();\r\n    navigator.clipboard.writeText(newText.value);\r\n    props.showAlert(' Copy To','success')\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    // console.log('handleClearClick was clicked: '+ text);\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(' Text Cleared','success')\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log('OnChange was clicked');\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  // text=\"new text\"; //wrong way to update state variable\r\n  //    setText('newtext');//write way to update state variable\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            id=\"myBox\"\r\n            rows=\"6\"\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#042743\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\"\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleUpClick}\r\n        >\r\n          CONVERT TO UPERCASE\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className= \"btn btn-primary mx-1 my-1\"\r\n          onClick={handleLoClick}\r\n        >\r\n          convert to lowercase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className= \"btn btn-primary mx-1 my-1\"\r\n          onClick={handleSenCaseClick}\r\n        >\r\n          Convert to sentencecase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className= \"btn btn-primary mx-1 my-1\"\r\n          onClick={handleCopyTextClick}\r\n        >\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleClearClick}\r\n        >\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h2>Your Text Sumarry</h2>\r\n        <p>\r\n          {text ? text.split(\" \").length - 1 : \"0\"} Words And {text.length}{\" \"}\r\n          Characters\r\n        </p>\r\n        <p>{text ? 0.008 * text.split(\" \").length : \"0\"} Minutes Read</p>\r\n        <h2>Priview</h2>\r\n        {/* <p>{text===\"\"?'Enter text':text}</p> */}\r\n        <p>{text.length>0?text:'Enter Something In The Textbox Above To Preview It Here.. '}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\"); //whether dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (massage, type) => {\n    setAlert({\n      msg: massage,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\" Dark Mode Has Been Enabled\", \"success\");\n      document.title = \"TextUtils - darkMode\";\n      // for just knoladge\n      /*\n        setInterval(() => {\n        document.title=\"TextUtils Is Amazing site\";\n       },2000);\n        \n       setInterval(() => {\n        document.title=\"Install TextUtils Noew\";\n       },1500);\n       */\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\" Light Mode Has Been Enabled\", \"success\");\n      document.title = \"TextUtils - lightMode\";\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n        {/* <Navbar title='TextUtils' aboutText=\"About\"/> */}\n        {/* <Navbar  aboutText=\"About\"/>  */}{\" \"}\n        {/* its set title using default props */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-2\">\n          {/* <Switch> */}\n            {/* /user --> component 1\n                /user/home --> component 2\n            without exact key word reaact math parchal mins com-1 render you want render com-2*/}\n\n            {/* <Route exact path=\"/about\"> */}\n              {/* <About /> */}\n            {/* </Route> */}\n            {/* <Route exact path=\"/\"> */}\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter The Text To Analyze Below\"\n                mode={mode}\n              />\n            {/* </Route> */}\n          {/* </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}